#配置根 Logger
#改代码表示输输出 info 级别以上的日志，文件分别输出，一个是 file，一个是 error
log4j.rootLogger=info,file,error,CONSOLE

### 输出到控制台 ###
log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Target = System.out
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern =  %d{ABSOLUTE} %5p %c{1}:%L - %m%n

#配置 file 日志信息输出目的地 Appender
#定义名为 file 的输出端是每天产生一个日志文件
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
#指定日志信息的最低输出级别位 INFO，默认为 DEBUG
log4j.appender.file.Threshold=INFO
#指定当前消息输出到 jpm/log4j/log.log 文件中
#log4j.appender.file.File=/jpm/log4j/log.log
log4j.appender.file.File=${webapp.root}logs/log.log
#指定按天来滚动日志文件
log4j.appender.file.DatePattern=yyyy-MM-dd
#配置日志信息的格式（布局）Layout 是可以灵活地指定布局模式
log4j.appender.file.layout=org.apache.log4j.PatternLayout
#格式化日志，Log4j 采用类似 C 语言中的 printf 函数的打印格式格式化日志信息
log4j.appender.file.layout.ConversionPattern=[%d{yyyy-MM-ddHH:mm:ss}][%-5p][jpm-%c{1}-%M(%L)]-%m%n
#指定输出信息的编码
log4j.appender.file.encoding=UTF-8

#配置 error 日志信息输出目的地 Appender
#定义名为 error 的输出端是每天产生一个日志文件
log4j.appender.error=org.apache.log4j.DailyRollingFileAppender
#指定日志信息的最低输出级别位 ERROR，默认为 DEBUG
log4j.appender.error.Threshold=ERROR
#指定当前消息输出到 jpm/log4j/error.log 文件中
#log4j.appender.error.File=/jpm/log4j/error.log
log4j.appender.error.File=${webapp.root}logs/error/log.log
#指定按月来滚动日志文件
log4j.appender.error.DatePattern=yyyy-MM
#配置日志信息的格式（布局）Layout 是可以灵活地指定布局模式
log4j.appender.error.layout=org.apache.log4j.PatternLayout
#格式化日志，Log4j 采用类似 C 语言中的 printf 函数的打印格式格式化日志信息
log4j.appender.error.layout.ConversionPattern=[%d{yyyy-MM-ddHH:mm:ss}][%-5p][jpm-%c{1}-%M(%L)]-%m%n
#指定输出信息的编码
log4j.appender.error.encoding=UTF-8

#使某个功能的日志单独输出到指定的日志文件
log4j.logger.saveUserLog=INFO,saveUserLog
#该配置就是让 job 的日志只输出到自己指定的日志文件中，表示 Logger 不会在父 Logger 的 appender 里输出，默认为 true
log4j.additivity.saveUserLog=false
log4j.appender.saveUserLog=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.saveUserLog.File=/jpm/log4j/saveUserLog.log
log4j.appender.saveUserLog.File=${webapp.root}logs/sys/log.log
log4j.appender.saveUserLog.DatePattern=yyyy-MM-dd
log4j.appender.saveUserLog.Append=true
log4j.appender.saveUserLog.layout=org.apache.log4j.PatternLayout
log4j.appender.saveUserLog.layout.ConversionPattern=[%d{yyyy-MM-ddHH:mm:ss}][%-5p][jpm-%c{1}-%M(%L)]-%m%n
#log4j.appender.error.encoding=UTF-8

# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个”%”字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
# 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
# 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
# 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。
# 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
# 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。